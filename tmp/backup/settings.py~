import datetime
import logging
import os
import string
import sys

from os.path import isfile, dirname, join, normpath
from time import localtime

from django.conf import global_settings

USE_NGGM_SETTINGS = False

#######################################################################
# function to exclude unwanted items from a tuple elegantly
# this is used by the various local_settings.py files so please
# don't remove it
#######################################################################
def exclude(base, exclude_list):
    """
    base is a tuple, exclude is the list of things that should be
    removed from the tuple
    if it exists and then a tuple will be returned
    """
    return tuple([item for item in base if not item in
                  exclude_list])

###################################################################################################
#
# These are settings that every environment should have.  These include production, staging,
# development environments.  Do not change this file unless it really should affect everywhere.
# If you just need to point to a differnt database location for your local development,
# look at local_settings_example.py to see how that is done.  You can override any setting
# in there that will only affect you and should not be checked into source control.
# THIS file is being checked in and should only be changed when all other code that depends
# on the change is either already in source control or will go in at the same time this file
# is comitted
#
###################################################################################################

PROJECT_PATH = os.path.dirname(os.path.normpath(__file__))
PROJECT_ROOT = os.path.normpath(PROJECT_PATH + '/../..')


LOCAL_DEV_SERVER = False
DEBUG = False
TEMPLATE_DEBUG = False

# going to be handled on the front end or smartsites, don't enable this
# it will fire a redirect prematurely on any url that hits the backend
APPEND_SLASH = False

ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)

MANAGERS = ADMINS

# These database settings are the defaults currently preferred by the autobuilder.
# Note that they may be changed to postgresql_psycopg2 in the future.
#
DATABASE_ENGINE = 'sqlite3'    # 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
DATABASE_NAME = 'project.db'   # Or path to database file if using sqlite3.
DATABASE_USER = ''             # Not used with sqlite3.
DATABASE_PASSWORD = ''         # Not used with sqlite3.
DATABASE_HOST = ''             # Set to empty string for localhost. Not used with sqlite3.
DATABASE_PORT = ''             # Set to empty string for default. Not used with sqlite3.
DATABASE_SUPPORTS_TRANSACTIONS = False

# smtp email host default for django mail
EMAIL_HOST = "smtpr2.int.ngeo.com"

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/New_York'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

#  Define a default site.
SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# see http://wiki.nationalgeographic.com/display/WPF/PublishingBasics
# for more information about publishing including configuring it in
# different environments

# this is the address that publish requests will be sent to
# the default is here for developers to run an admin and publishing
# instance on the same name. If you want to use this out of the box,
# you will need your live server running on port 80 and your admin
# name-hosted elsewhere or on a different port, such as 8000
PUB_LIVE_ADDR = "http://192.168.2.36:8001"

# This is the directory where the serialized file will be wtitten to on the
# sending side of a publish and read from on the recieving side of a publish.
# If publishing and recieving are two different machines, this needs to be a
# shared directory.  If they are on the same machine, they can just use
# the default tmp as defined below.
# on the publishing server, this is the directroy files are written to
# on the recieving server, this is where files are read from
PUB_XFER_DIR = os.path.join(PROJECT_ROOT, 'publish')

# calculate out the various project paths. if you hardcode changes
# to any of the settings above, you may need to also hardcode changes
# to these variables into your local settings file
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')
STATIC_LOCAL_ROOT = os.path.join(PROJECT_ROOT, 'static_local')
STATIC_LOCAL_URL = '/static_local/'
STATIC_URL_KIDS_LEGACY = 'http://kids.nationalgeographic.com/staticfiles/'
MEDIAGRID_EXPORT_PATH = os.path.join(PROJECT_ROOT, 'mediagrid')

# determine the database mode via environment variables if possible
# if not fall back to development
if os.environ.has_key('WPF_DB_MODE') and \
        os.environ['WPF_DB_MODE'] in ('content', 'live',):
    WPF_DB_MODE = os.environ['WPF_DB_MODE']
else:
    WPF_DB_MODE = 'development'

# set the STATIC_URL from an environment variable if possible
if os.environ.has_key('WPF_STATIC_URL'):
    STATIC_URL = os.environ['WPF_STATIC_URL']
else:
    STATIC_URL = '/static/'

# set media directories etc based on the db mode
PROJECT_EXECUTABLE = os.path.normpath(PROJECT_ROOT + '/bin/project')
MEDIA_URL = os.path.join(STATIC_URL, 'media/')
MEDIA_ROOT = os.path.join(STATIC_ROOT, 'media/')

if WPF_DB_MODE == 'content':
    PROJECT_EXECUTABLE = os.path.normpath(PROJECT_ROOT + '/bin/project-content')
    MEDIA_URL = os.path.join(STATIC_URL, 'media-content/')
    MEDIA_ROOT = os.path.join(STATIC_ROOT, 'media-content/')
elif WPF_DB_MODE == 'live':
    PROJECT_EXECUTABLE = os.path.normpath(PROJECT_ROOT + '/bin/project-live')
    MEDIA_URL = os.path.join(STATIC_URL, 'media-live/')
    MEDIA_ROOT = os.path.join(STATIC_ROOT, 'media-live/')

# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
# Examples: "http://foo.com/media/", "/media/".
ADMIN_MEDIA_ROOT = os.path.join(STATIC_URL, 'admin_media')
ADMIN_MEDIA_PREFIX = STATIC_URL + 'admin_media/'

# richmedia stuff
RICHMEDIA_BASE = 'richmedia'
RICH_MEDIA_CONFIG_DIR = os.path.dirname(PROJECT_PATH + "/templates/core_media/ngrichmedia/templates/configuration/")

# feed stuff TODO
FEEDS_DIR = os.path.join(MEDIA_ROOT, 'feeds')
METADATA_EXCHANGE_FEED_FILE = 'xchange_feed.xml'
METADATA_EXCHANGE_FEEDS_DIR = os.path.join(FEEDS_DIR, 'metadata_exchange')

# audio app staff TODO: move to app local settings
AUDIO_MEDIA_BASE = 'audio'
AUDIO_MEDIA_ROOT = os.path.join(MEDIA_ROOT, AUDIO_MEDIA_BASE)

# file app staff TODO: move to app local settings
FILE_MEDIA_BASE = 'file'
FILE_MEDIA_ROOT = os.path.join(MEDIA_ROOT, FILE_MEDIA_BASE)

CSS_MEDIA_BASE = 'css'
CSS_MEDIA_ROOT = os.path.join(MEDIA_ROOT, FILE_MEDIA_BASE)

#Metadata Exchange related settings
METADATA_UPDATE_CMD = 'update_gsa'
METADATA_EXCHANGE_DOMAIN = 'preview.beta.nationalgeographic.com'

# used by pagination to determine how many pages to show around the current.
PAGINATION_DEFAULT_WINDOW = 2
PAGINATION_DEFAULT_PAGINATION = 5

# simple python string replacements that should happen on the rendered html page right before
# it's served up.  This is only done on the Page.views.page_view view.
# this is a simple list of two item lists.  The first part is the string to look for and the
# second part is what it should be replaces with.  The replacements are done in the order
# they are defined
# for example, [ ['foo','bar'] , ['baz','boo'] ] will do the following on the output html
# text = text.replace('foo','bar')
# test = text.replace('baz','boo')

# HTML_REPLACEMENTS = [ ['href="/travel/', 'href="http://travel.nationalgeographic.com/'] ]

HTML_REPLACEMENTS = []

#these may be needed if photologue doesn't come out with a fix before we need to release
# photologue sameple image path
#SAMPLE_IMAGE_PATH = os.path.join(MEDIA_ROOT, 'photologue', 'res', 'sample.jpg')

####################################
# PHOTOLOGUE_IMAGE_FIELD_MAX_LENGTH CANNOT BE CHANGED AT WILL.  It directly affects the photologue model and
# any model that inherits from it will neeed to change also.
# See how this migrations might be done in src/core_media/migrations/0004_make_image_path_longer.py if this value
# does need to change.
# ALSO you can NOT override this value in your local_settings and get predictable results

PHOTOLOGUE_IMAGE_FIELD_MAX_LENGTH = 200

# tell south to always freeze apps when making migrations
SOUTH_AUTO_FREEZE_APP = True


def image_path(instance, filename):
    """
    this function assumes PHOTOLOGUE_DIR has not been overridden.  if it has,
    you will need to make adjustments here.

    """
    # we need to get this setting at runtime, not define time
    from django.conf import settings
    from core_media.models import NGPhoto
    if not instance:
        raise Exception("image_path called with instance==None for filename=%s"
                        % filename)
    base_path = os.path.join(settings.MEDIA_ROOT, 'photos')
    if isinstance(instance, NGPhoto):
        if not instance.id:
            instance.save()
        ngphoto_id = instance.id
    elif hasattr(instance, "ngphoto"):
        ngphoto_id = instance.ngphoto.id
    else:
        raise Exception("instance was not NGPhoto or have an ngphoto attribute"
                        " for filename=%s" % filename)
    ext = filename.split(".")[-1]
    filename_new = "%s.%s" % (ngphoto_id, ext)
    def dir_from_photoid(id):
        s = "%08d" % id
        c1 = s[:3]
        c2 = s[3:6]
        return "/".join((c1, c2))
    path = dir_from_photoid(ngphoto_id)
    check_path = os.path.join(base_path, path)
    if not os.path.exists(check_path):
        os.makedirs(check_path)
    check_path_overrides = os.path.join(base_path, path, "overrides")
    if not os.path.exists(check_path_overrides):
        os.makedirs(check_path_overrides)
    the_path = os.path.join('photos', path, filename_new)
    logging.debug('the_path = %s' % the_path)
    return the_path

# have photologue use the custom function above to determine where
# it should save photos to
PHOTOLOGUE_PATH = image_path

BULK_PHOTO_UPLOAD_DIR = os.path.join(PROJECT_ROOT, 'bulk_upload')

FORCE_LOWERCASE_TAGS = True  #make tags lower case (insensitive)

#TinyMCE Configuration Details

#TinyMCE needs to be served from the application host. If served from the
#static media host, same origin problems arise. TinyMCE provides a workaround
#for this but to make it work within django-tinymce and across all site
#installations (portable) some forking/hacking would be required.
TINYMCE_JS_URL = "%scommon/admin/j/tiny_mce/tiny_mce_src.js" % (STATIC_LOCAL_URL)
TINYMCE_JS_ROOT = os.path.join(STATIC_LOCAL_ROOT, 'common', 'admin', 'j', 'tiny_mce')

TINYMCE_DEFAULT_CONFIG = {
    'theme': "advanced",
    'plugins':"rawmode,ajaxpaste,safari,spellchecker,pagebreak,advimage,advlink,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,directionality,fullscreen,noneditable,nonbreaking,xhtmlxtras",
    #'plugins':"ajaxpaste,safari,spellchecker,pagebreak,advimage,advlink,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,directionality,fullscreen,noneditable,nonbreaking,xhtmlxtras",
    'theme_advanced_buttons3_add': "|,spellchecker",
    'theme_advanced_buttons1': "fullscreen,preview,code,print,spellchecker,|,cut,copy,paste,pastetext,pasteword,undo,redo,|,search,replace,|,rawmode",
    #'theme_advanced_buttons1': "fullscreen,preview,code,print,spellchecker,|,cut,copy,paste,pastetext,pasteword,undo,redo,|,search,replace",
    'theme_advanced_buttons2': "formatselect,fontselect,fontsizeselect,insertfile,insertimage,|,bold,underline,italic,strikethrough,|,link,unlink,|,numlist,bullist,|,sub,sup,charmap,insertdate,inserttime,|,outdent,indent,|,justifyleft,justifycenter,justifyright,justifyfull,|,ltr,rtl,|,backcolor,forecolor,pagebreak",
    'theme_advanced_buttons3': "",
    'theme_advanced_disable' : 'cut,copy,paste,cite,abbr,acronym,fontselect,fontsizeselect,forecolor,backcolor,forecolorpicker,backcolorpicker,blockquote,del,ins',
    'theme_advanced_toolbar_location': "top",
    'theme_advanced_toolbar_align': "left",
    'theme_advanced_statusbar_location': "bottom",
    'theme_advanced_resizing' : "true",
    'theme_advanced_resize_horizontal' : 1,
    'theme_advanced_resizing_max_width' : "750",
    'width' : "750",
    'height': "250",
    'entity_encoding' : 'raw',
}

TINYMCE_SPELLCHECKER = True
TINYMCE_COMPRESSOR = True
TINYMCE_FILEBROWSER = False

# Syndication Settings
FEED_RSS_MAX = 10
FEED_XML_FULL_TEXT_MAX = 10

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'n*d%%vr4a3^a0d=gl+vyq$0xfp#=ial9n#-)+*csvctly&fvek'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'nggm.smartsites.template.loaders.site_filesystem.load_template_source',
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
    #'django.template.loaders.eggs.load_template_source',
)

MIDDLEWARE_CLASSES = (
    'nggm.cacheplus.middleware.CacheClearMiddleware',
    #'nggm.cacheplus.middleware.UpdateCacheMiddleware',
    'django.middleware.http.ConditionalGetMiddleware',
    'django.middleware.common.CommonMiddleware',

    # added for the energizer project
    'energizer.middleware.SWFUploadMiddleware',

    'django.middleware.transaction.TransactionMiddleware',
    'nggm.core.middleware.SessionMiddleware',
    'nggm.sso.middleware.PluckCookieMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'wpf.middleware.ExceptionLoggingMiddleware',
    'nggmlogging.middleware.VirtualHostLoggingMiddleware',
    #'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    #'proxy_fallback.middleware.ProxyFallbackMiddleware',
    #'django.contrib.redirects.middleware.RedirectFallbackMiddleware',
    'nggm.sso.middleware.EnforceTOS',
    'nggm.sso.middleware.EnforceActiveSSOProfile',
    'nirvana.middleware.ContestMiddleware',
    'nggm.smartsites.middleware.SmartSitesMiddleware',
    # 'gating.middleware.GatingMiddleware',
    'pagination.middleware.PaginationMiddleware',
    'nggm.cachebust.middleware.CacheBustMiddleware',
    'djangodblog.middleware.DBLogMiddleware',
    #'nggm.cacheplus.middleware.FetchFromCacheMiddleware',

)

ROOT_URLCONF = 'project.urls'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    #"%s/templates" % PROJECT_PATH,
    #"%s/mondoadmin/templates" % PROJECT_PATH,
    "%s/sites/all" % STATIC_ROOT
)

SITE_TEMPLATE_DIRS = (
    # This directive is only used by the wpf template loader for site-specific
    # overrides.
    #
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    "%s/sites" % STATIC_ROOT,
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'widgets.context_helpers.useful_vars',
    # this should be a permissions check, not a context processor
    #'publishing.context_processors.check_publishability',
    'mondoadmin.context_processors.targeted_js',
    'layout.layout_management.layout_manager_helper',
    'toolbar.context_processors.add_metadata',
    'education.context_processors.common',
    'layout.context_processors.zone',
    'nggm.smartsites.context_processors.site_static_url',
    'energizer.context_processors.common',
    'pluck.context_processors.pluck_locations',
    'ngso.context_processors.rpx',
    'nirvana.context_processors.taas',
    # 'gating.context_processors.gating_vars'
)

INSTALLED_APPS = (
    # south needs to be above wpf so that wpf can override the syncdb command since the last
    # one wins.  We will never need to override any templates from south, so we are good otherwise
    'south',
    # wpf should be first so that template can be overridden from other apps
    'wpf',
    # cacheplus needs to be high, becuase it will only be able to autocache items
    # that are under it.
    'nggm.cacheplus',
    'nggm.settings',
    'nggm.smartsites',
    'nggm.cachebust',
    'nggm.simpleserialize',
    'nggm.svnmedia',
    'autogenerate',
    'autocomplete',
    'core',
    'layout',
    'publishing',
    'community',
    'core_media',
    'metatagging',
    'bundle',
    'remix',
    'ng_remix',
    'tagging',
    'theselector',
    'widgets',
    'metadata',
    'photologue',
    'tinymce',
    'page',
    'tools',
    'metaadmin',
    'exchange',
    'webanalytics',
    'advertising',
    'mondoadmin',
    'core_content',
    'content_item_types',
    'toolbar',
    'renderable',
    'syndication',
    'dictionary',
    'rest',
    'ajax',
    'picklist',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.humanize',
    'site_permissions',
    #'django.contrib.flatpages',
    #'django.contrib.redirects',
    #'proxy_fallback',
    'ngmigration',
    'education.edu_core',
    'mptt',
    'photo_of_the_day',
    'open_html',
    'taxonomy',
    'contentstamp',
    'pagination',
    'topics',
    'compress',
    'user_prefs',
    'djangodblog',
    'kids',
    'poll',
    'fastfacts',
    'nggm.sso',
    #'registration',
    'content_bundle',
    'cssmanager',
    'daily_feature',
    'energizer',
    'mod_djeeform',
    'countries',
    'ng_quiz',
    'video',
    #'test_utils',
    'gating',
    'form_tools',
    'surveys',
    'nirvana',
    'exposure',
    'mailer',
    'ngso',
    'voting',
    'native_tags',
    'paypal.standard.ipn',
    'newsletter',
    'djangoratings',
)

# use memcache sessions
#SESSION_ENGINE="django.contrib.sessions.backends.cache"
# use database sessions
SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
#SESSION_COOKIE_DOMAIN=".nationalgeographic.com"
#SESSION_COOKIE_PATH="/"

# this is the list of apps that it is ok to sync.  All other apps MUST have a migration
# or wpf will not allow the syncdb
# even if a wpf app has not models, a blank migration should be created for it.
# Only 3rd party apps should be added to this list.  No WPF should be added to
# this list unless there is a very good reason.  If you want to work on an app
# and let it sync, add to this list via your local_settings.py, NOT here

# third party libraries that we don't manage
SYNC_OK_APPS = ['south', 'remix', 'photologue', 'tinymce', 'django.contrib.auth',
                'django.contrib.contenttypes', 'django.contrib.sessions',
                'django.contrib.sites', 'django.contrib.admin', 'django.contrib.flatpages',
                'django.contrib.redirects', 'mptt', 'pagination',
                'debug_toolbar', 'djangodblog', 'paypal.standard.ipn',
                # there is a funky model in the wpf app that south doesn't like
                # so for now, we are going to let it continue to sync
                'wpf',
                # these are apps that need migrations made bug need to chec
                # and ensure they are not being used yet
                'exchange', 'picklist', 'ngmigration', 'compress', 'nggm.sso',
                'ngso',
                # 3rdparty 'django voting' app
                'voting', 'native_tags', 'djangoratings',
                ]

# What apps fixtures should be regenerated be the bin/project refixture command?
FIXTURED_MODELS = ['photologue.PhotoSize', 'layout.Module', 'sites.Site',
                   'layout.LayoutMode', 'theselector.ContentTypeSelectable',
                   'smartsites.SmartSite']

# set this to True if you want to simple django table creates to happen when testing
# and not force migrations to run.  The default is False.  This should only be used
# when troubleshooting a single test case and needs to be not defined or False
# when doing a full regression test of the unit tests
#IGNORE_MIGRATIONS_FOR_TEST = True

#  We need to import this early so that the admin UI respects it.
#import django_granular_permissions


#  LDAP authentication related settings...
AUTH_LDAP_SERVER = "10.11.5.21"
AUTH_LDAP_BACKUP_SERVER = "10.11.5.20"
AUTH_LDAP_USER_DN_FORMAT = "uid=%s, ou=People, dc=nationalgeographic, dc=com"

#RPXNOW_API_KEY="8716e97543fc520b88ce1c68724a51ee46c4af63"
RPXNOW_REALM = 'wpf.rpxnow.com'
RPXNOW_REST_DOMAIN = "localhost:8000"
#RPX_TRUSTED_PROVIDERS

# display NG registration option to users
NG_REGISTRATION = True

# enable SSO profiles
AUTH_PROFILE_MODULE = "nggm.models.SSOProfile"

AUTHENTICATION_BACKENDS = (
 'ngso.backends.SSOKeybackend',
 'nggm.sso.backends.RpxBackend',
 'django.contrib.auth.backends.ModelBackend',
)

#  If python ldap module is installed, have the LDAP backend handle any users that it can,
#  then fall through, if necessary, to the normal default Django authentification backend.
#
try:
    import ldap
    INSTALLED_APPS += ('ldapauth',)
    AUTHENTICATION_BACKENDS = ('ldapauth.backends.LDAPBackend',) + AUTHENTICATION_BACKENDS
except:
    pass

#  Publishing and site-based permissions settings...
#
#  In order for non-superusers to see publish buttons, a group
#  with this name needs to exist, and they should be members of it.
# (This setting is not used as of yet since Django groups/permissions
#  are not yet explicitly defined.)
#
PUBLISHERS_GROUP_NAME = "Publishers"

# Until the permissions logic is in place, all new django users
# created by the ldap backend are set to "is_staff". If the following
# flag is True, then they are also set to "is_superuser".
#
AUTH_LDAP_SUPERUSER_BY_DEFAULT = True


DEFAULT_DOMAIN = 'nationalgeographic.com'

AUTOGENERATE_ROOT = 'autogenerate'
MODULE_AUTOGENERATE_ROOT = 'autogenerate.module_generation'

# CACHE timeout for cache middleware
# CACHE_MIDDLEWARE_SECONDS = 3600

# default middleware cache key
# CACHE_MIDDLEWARE_KEY_PREFIX = 'ngdm.wpf.%s' %(DATABASE_NAME)

# only cache anonymous sessions (from django.middleware.cache)
CACHE_MIDDLEWARE_ANONYMOUS_ONLY = True

# cache timeout for model_cache in seconds.  default is 1 minute
#MODEL_CACHE_TIMEOUT = 60

# http://code.google.com/apis/maps/signup.html - URL specific
GOOGLE_MAPS_KEY = 'ABQIAAAAqyD57R92udBM4f7P9pU4FBSDuMyyVSJa-evHy7nNv7_Thv-HQBTkY68E2JNflFZeQZ81pt54oU3I-A'

# for django-registration app
ACCOUNT_ACTIVATION_DAYS = 2
DEFAULT_FROM_EMAIL = 'noreply@nationalgeographic.com'
LOGIN_REDIRECT_URL = '/energizer/sign_up/'

# Max and Min font sizes for tag cloud in Activity
CLOUD_MAX_FONT_SIZE = 30
CLOUD_MIN_FONT_SIZE = 10

SITE_URL = 'www.nationalgeographic.com'

# Creates the education local_settings.py file place holder.
edu_local_consants_fn = '%s/src/education/local_constants.py' % PROJECT_ROOT
if not isfile(edu_local_consants_fn):
    print u'Creating empty edu local constants file at %s' % edu_local_consants_fn
    f = open(edu_local_consants_fn, 'w')
    f.close()

# GSA server configuration
if LOCAL_DEV_SERVER:
    GSA_SEARCH_SERVER_DEFAULT = "search.nationalgeographic.com"
    GSA_FEEDERGATE_HOSTS = ("search-dev1.nationalgeographic.com",
            "search-dev2.nationalgeographic.com")
else:
    GSA_SEARCH_SERVER_DEFAULT = "search.int.ngeo.com"
    GSA_FEEDERGATE_HOSTS = ("search-prod1.nationalgeographic.com")

# The number of days account activation links will be valid for.
# This is used by both sso registration and nirvana registration
# hence why it is here now. [See GMKANBAN-840]
ACCOUNT_ACTIVATION_DAYS = 3

# Useful URL fragments
ADMIN_ROOT_URL = 'https://admin.nationalgeographic.com/'
API_ROOT_URL = 'http://api.ngeo.com/'
API_SINGLE_INGEST_URL = API_ROOT_URL + 'mde/single_ingest/single/?url='

## NATIVE TAGS
NATIVE_TAGS = (
    'native_tags.contrib.feeds',
)

# Paypal Configuration
PAYPAL_RECEIVER_EMAIL = "NGphotocontest@ngs.org"

# Forgotten Password settings
FORGOTTEN_PASSWORD_LENGTH = 8
FORGOTTEN_PASSWORD_CHARSET = string.letters + string.digits
FORGOTTEN_PASSWORD_EMAIL_SUBJECT = 'Your National Geographic Password Reset Request'